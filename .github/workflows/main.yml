name: 'CI CD pipeline'

on:
  push:
    branches: [ "terraform_practice" ]
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: build shadowJar using gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: shadowJar

      - name: Archive shadowJar
        uses: actions/upload-artifact@v3
        with:
          name: esopApp
          path: build/libs

  deploy:
    needs: terraform
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: esopApp

      - name: Transfer artifact to EC2 instance
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          eval `ssh-agent`
          echo "sanjeev kumar"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          scp -o StrictHostKeyChecking=no "deploy.sh" ec2-user@$SSH_HOST:~
          scp -o StrictHostKeyChecking=no "esop-0.1-all.jar" ec2-user@$SSH_HOST:~
          ssh -o StrictHostKeyChecking=no ec2-user@$SSH_HOST -t "sudo yum install java-17-amazon-corretto-headless -y"
          ssh -o StrictHostKeyChecking=no ec2-user@$SSH_HOST -t "sudo chmod 755 deploy.sh && sudo ./deploy.sh"

  terraform:
    needs: build
    name: 'Terraform'
    env:
      AWS_ACCESS_KEY_ID: ${{secrets.ACCESS_KEY}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.SECRET_KEY}}

    runs-on: ubuntu-22.04
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Apply
        if: github.ref == 'refs/heads/terraform_practice' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false


      - name: step1
        run: |
          echo "instance_ip_addr=192.168.1.1" >> "$GITHUB_ENV"
        id: step1

      - name: step2
        run: |
           echo "sanjeev"
           echo ${{steps.Apply.outputs.instance_ip_addr}}
#          echo "The IP address is ${{ steps.step1.outputs.instance_ip_addr }}"
        
